/*
 * @Author: luoli
 * @Date: 2022-11-20 18:23:21
 * @LastEditors: luoli
 * @LastEditTime: 2022-11-20 19:46:08
 * @FilePath: /reg/combination.js
 * @Description:
 */
const reg1 = /^\d+([+]\d+)*(;\d+([+]\d+)*)*$/; //1+2;3+4
const reg2 = /^(\d[+])*\{\d+(,\d+)+\}:(\d+)((([+]\{\d+(,\d+)+\}:(\d+))*)(([+]\d+)*))*$/; //{1,2}:1  {1,2}:1+5  {1,2}:1+{3,4}:1 {1,2}:1+{3,4}:1+5
// ;后面是普通组合 {2,3}:1+1+{4,5}:1;1+1+2
const reg3_1 =
  /(\d[+])*\{\d+(,\d+)+\}:(\d+)((([+]\{\d+(,\d+)+\}:(\d+))*)(([+]\d+)*))*(\;\d+([+]\d+)*)+/;
//  ;后面是组 {2,3}:1+1+{4,5}:1;{2,3}:1+1 1+{2,3}:1;1+{2,3}:1+{2,3}:1+1
const reg3_2 =
  /(\d[+])*\{\d+(,\d+)+\}:(\d+)((([+]\{\d+(,\d+)+\}:(\d+))*)(([+]\d+)*))*(\;(\d[+])*(\{\d(,\d)+\}:\d)+)+([+]\{\d+(,\d)+\}:\d+)*([+]\d+)*/;
const reg4 = /\d+([+]\d)*(\;(\d[+])*(\{\d(,\d)+\}:\d)+)+([+]\{\d+(,\d)+\}:\d+)*([+]\d+)*/;
//

let sealGroup = '';

// 1、普通； 普通；（普通/组）
// sealGroup = '1+2;1';
// sealGroup = '1;1+2';
// sealGroup = '1+2;1;1+{2,3}:1';
// sealGroup = '1;1+2;1+2';
// // 2、普通； 组；（普通/组）
// /\d+([+]\d)*(\;(\d[+])*(\{\d(,\d)+\}:\d)+)+([+]\{\d+(,\d)+\}:\d+)*([+]\d+)*/
// sealGroup = '1;1+{2,3}:1';
sealGroup = '1+2;{2,3}:1+1';
// sealGroup = '1;1+{2,3}:1;1';
// sealGroup = '1+2;{2,3}:1+1;1+2';
// // 3、组； 普通；（普通/组）
// sealGroup = '1+{3,2}:1;1+2';
// sealGroup = '{2,3}:1;1';
// sealGroup = '1+{3,2}:1;1+2;1';
// sealGroup = '{2,3}:1;1;1+{2,3}:1';
// // 4、组； 组；（普通/组）
// sealGroup = '1+{2,3}:1;{1,2}:1';
// sealGroup = '{1,2}:1+3;1+{2,3}:1+4';
// sealGroup = '1+{2,3}:1;{1,2}:1;1+2';
// sealGroup = '{1,2}:1+3;1+{2,3}:1+4;{1,2}:1';
// // 5、普通
// sealGroup = '1';
// sealGroup = '1+2';
// // 6、组
// sealGroup = '{1,2}:1+1';
// sealGroup = '1+{2,3}:1';

console.log(
  reg1.test(sealGroup) ||
    reg2.test(sealGroup) ||
    reg3_1.test(sealGroup) ||
    reg3_2.test(sealGroup) ||
    reg4.test(sealGroup)
);
